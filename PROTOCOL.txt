

Th BMF protocol
===============

This document defines a protocol for communications over a serial line between 
a host running the bmf application and an embedded system to control a 
bi-dimensional machining facility.  

The host is a system running the application based on python and bindings for 
the QT development library. The application is developed on Linux and deployed 
on Windows. For the purpose of this document, the host is referred to 
as *the PC*.

The embedded system in the prototype is a Z80 family processor, with the peer 
implementation in assembly language for that processor.  The embedded system 
is therefore referred to as *the Z80*.

The PC runs an application which displays a user interface, sends frames to 
the Z80, and receives frames as well.  The Z80 sends updates to counters and 
display on the PC.  The user interface features:
   -- Keys arranged on one or more keyboards.
   -- A dialog of counters
   -- A character-based display (using a fixed font, and fixed dimensions) for the z80 to display arbitrary information.



Protocol has not yet been analyzed.  In general, the PC being more powerful, handles user interaction, and often checks for 
arrival of new data from the Z80 (without polling), and will post commands from the user as needed.  The Z80, having real-time constraints and limited resources, will check for data when convenient, and post commends when ready.

Original implementation was expecting 10Â´s of updates per second.  It turns out that the Z80 code is simplest when 
it sends several hundred updates per second.  


Notation
--------

Raw hexadeximal values are assumed for all numbers (no prefix used.)
In some cases, ASCII names will be used for characters.

NUL - ASCII NUL character (00)
LF  - ASCII LF (Line Feed) character (0x0a)

The protocol is peer to peer, with each side able to send commands asynchronously.  frames are structured as follows:
   <opcode> <arguments> LF

opcode is a single byte determining the meaning of the rest of the frame.  LF terminates the frame.
In some cases, LF may be present in the middle of the frame, but these cases are to be minimized.

Opcodes:

For most keys presented on the keyboard, there is an separate opcode which is sent by the PC to the Z80.  
format of a key frame::

  Send:
  <Key> 0A 
        Send the key to the Z80.  Key is a single byte, followed by a line feed.

All of these keys must be < 0x80.

The key 0x0a must be avoided as it triggers end of line.



Keys defined:
  10 - 1f -  keypad 1
  20 - 2f -  keypad 2
        -- labels can be set using the same indices.

Other opcodes are:

  3A - Intel hex formated data record 
     Trigger send of data in 8-bit Intel Hex format, blocked by 24 byte frames.
     if frame less than 24 bytes, it is padded with NULs.  
     ':' <datacount> <AddrH> <AddrL> <type> <data> <chksum> <padding... >

     static last frame, triggers a return to command mode:
     ':' 00 01 ff 00 00 00 ... 

  80 - Block Mode
     <name>,LF
  
     Initiate a block mode transfer.  Data transfer uses intel hex format data 
     records.  In this mode, transfers are synchronous.  Sender sends one 
     intel hex record, awaits an acknowledgement.  if sender receives negative 
     acknowledgement, sender should resend.

     <name>, is optional.  It can be used if the peer has a file system 
     available, to write the file.

     FIXME: retransmission is an infinite loop...  limit it somehow?
     
  81 - Display characters
     <x>, <y>, <string> LF
     x - single byte column dimension bitwise ored with 0x80
     y - single byte row dimension bitwise ored with 0x80
     <string>  -- arbitrary sequence of printable ASCII characters
     sequence ends with line feed.

     if x=ff and y=ff, then it means clear screen.

     error conditions:
	- dimensions off screen.
        - non-printable characters in string.


  82 - General Set (16-bit) Counter - OBSOLETE - FIXME.
     <Id>,<Hi>,<Lo>,LF
     Id - one byte index of the counter whose value is to be set.
     Hi - most significant byte of counter whose value is to be set.
     Lo - least significant byte of counter whose value is to be set.

    counters 0,1,2 are for the left column in the Counter Display.
    counters 3,4,5 are for the right column in the Counter Display.
    counters above 5 are not displayed unless programmed for the
    character display.

  83 - Acknowledge last command received
     <status>, LF - completion status of last command received.

     00 - OK  -     ack.
     otherwise, bad. - nack / negative acknowledgement.
     01 - malformed line, resend please 

     note: unless in block mode, acknowledgements are not required.


  84 - Position Counter
     <idx>,<i>,<j>,LF

     request that character display include the idx counter at the 
     given position.  Future counter updates will cause a 6 character 
     string update at that location.

     encoding is similar to write string command.

     i=7f,j=7f -> cancel (stop updating counter value here.)
 
  85 - Update LEDS
     <LED>,LF
     bit mask of LEDS to light.

  86 - Update Labels - change a label in the UI somewhere.
     <idx>,String,LF

     index is straight...
     Idx:     0-3 LEDS 0-3.
                  Counter Display
              4-7 Column heading, then labels for three counters (0,1,2) 
              8-11 2nd column heading, labels for three counters (3,4,5)

  87 - Send Me - request z80 dump contents of memory.
     SH,SL,CH,CL,String,LF

     Start Address, High, then Low byte.
     transfer count, High, then low byte.
     String = filename

     Send me the filenamed by the string.  If the file ends in .hex, 
     then use the addressing from the file.  Otherwise, use the given 
     start address when building the intel hex transfer records.

     peer is to respond with a 0x80 with the same filename followed by 
     a series of intel-hex encoded records of data from the named file.
     initial destination address of data given by Start.

  90 -> 9f - update counters 0 through f.
     <Hi>,<Lo>,LF


  AA - Alcaholics Anonymous...
     drunken sailor mode, peer is to respond with a large number of screen 
     and counter updates, to demonstrate functionality.   


Protocol Analysis
-----------------

now that it is symmetrical, am reassured.

re-synchronization... if we get lost, how do we get back in sync?  not sure the resync stuff works, 
what if they both lose sync... what should they do?

